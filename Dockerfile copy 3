# Base stage - build dependencies

# FROM public.ecr.aws/docker/library/python:3.12.8-slim-bookworm as builder
FROM public.ecr.aws/docker/library/python:3.12.8-alpine as builder

# Update installed packages and install system dependencies
RUN apt-get update -y \
    && apt-get install -y bash \
    && apt-get install -y make \
    && apt-get install -y wget 

ARG PYTHON_VERSION

# Create Python Virtual Env
RUN python${PYTHON_VERSION} -m venv /venv

# Create and set work directory (make/pip need this to find Makefile and pyproject.toml)
WORKDIR /df-data-profile

# Copy the application dependencies
COPY ./pyproject.toml /df-data-profile
COPY ./Makefile /df-data-profile

# Copy the app dependency source code into the container.
COPY --from=utils . /packages/utils
COPY --from=df-metadata . /packages/df-metadata
COPY --from=df-app-calendar . /packages/df-app-calendar
COPY --from=df-config . /packages/df-config

# Install app dependencies
RUN . /venv/bin/activate \
    && make install

# Copy the app source code into the container.
COPY . /df-data-profile

# Install app 
RUN . /venv/bin/activate \
    && make install 


# Final stage

# FROM public.ecr.aws/docker/library/python:3.12.8-slim-bookworm as runner
FROM public.ecr.aws/docker/library/python:3.12.8-alpine as runner

# Update installed packages and install system dependencies
RUN apt-get update -y \
    && apt-get install -y bash \
    && apt-get install -y make \
    && apt-get install -y wget \
    && apt-get install -y findutils \
    && apt-get install -y tree \
    && apt-get install -y procps \
    # && apt-get install -y java-common 
    && apt-get install -y openjdk-17-jdk
# findutils is needed for xargs command
# shadow-utils is needed for useradd command
# && \ apt-get install -y shadow-utils
# procps is needed for pyspark
# java-common is needed for java-17-amazon-corretto

ARG PYTHON_VERSION

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PATH="/venv/bin:$PATH"

COPY --from=builder /venv /venv

# Copy the app source code from current directory (where Dockerfile is) into the container.
COPY . /df-data-profile
COPY --from=df-config ./cfg /packages/df-config/cfg

# Expose the port that the application listens on. i.e. container port
# This is just for documentation. Port should be exposed when the container is instantiated or via docker publish port.
ARG CONTAINER_PORT
EXPOSE ${CONTAINER_PORT}

# Set work directory for the app
WORKDIR /df-data-profile

# Create a non-privileged user that the app will run under.
RUN useradd --create-home --shell /bin/bash app-user
RUN mkdir -p /nas/datalake/user/hive/warehouse \
    && chown -R app-user /nas/datalake/user/hive/warehouse

# Switch to the non-privileged user to run the application.
USER app-user

# Run the application.
CMD ["/bin/bash"]
# CMD ["dp-app-api"]
# CMD ["dp-app-api", "--debug"]
# CMD ["dp-app-api", "--debug", "y"]
